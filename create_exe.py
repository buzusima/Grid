"""
Build Single EXE - FIXED VERSION
build_single_fixed.py
‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÉ‡∏´‡πâ‡πÑ‡∏î‡πâ‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ 100%
"""

import os
import subprocess
import sys

def create_spec_file():
    """‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå .spec ‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô - ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÅ‡∏•‡πâ‡∏ß"""
    
    spec_content = '''# -*- mode: python ; coding: utf-8 -*-

block_cipher = None

a = Analysis(
    ['main.py'],
    pathex=[],
    binaries=[],
    datas=[
        ('config.json', '.'),
        ('mt5_auto_connector.py', '.'),
        ('smart_profit_manager.py', '.'),
        ('survivability_engine.py', '.'),
        ('ai_money_manager.py', '.'),
        ('gold_hedge_calculator.py', '.'),
        ('api_connector.py', '.'),
    ],
    hiddenimports=[
        'mt5_auto_connector',
        'smart_profit_manager',
        'survivability_engine', 
        'ai_money_manager',
        'gold_hedge_calculator',
        'api_connector',
        'MetaTrader5',
        'numpy',
        'numpy.core',
        'numpy.core.multiarray',
        'tkinter',
        'tkinter.ttk',
        'requests',
        'json',
        'threading',
        'datetime',
        'typing',
        'enum',
        'dataclasses',
        'math',
        'time',
        'os',
        'sys'
    ],
    hookspath=[],
    hooksconfig={},
    runtime_hooks=[],
    excludes=[],
    win_no_prefer_redirects=False,
    win_private_assemblies=False,
    cipher=block_cipher,
    noarchive=False,
)

pyz = PYZ(a.pure, a.zipped_data, cipher=block_cipher)

exe = EXE(
    pyz,
    a.scripts,
    a.binaries,
    a.zipfiles,
    a.datas,
    [],
    name='AI_Gold_Trading',
    debug=False,
    bootloader_ignore_signals=False,
    strip=False,
    upx=True,
    upx_exclude=[],
    runtime_tmpdir=None,
    console=True,
    disable_windowed_traceback=False,
    argv_emulation=False,
    target_arch=None,
    codesign_identity=None,
    entitlements_file=None,
)
'''

    with open('AI_Gold_Trading.spec', 'w', encoding='utf-8') as f:
        f.write(spec_content)
    
    print("‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå AI_Gold_Trading.spec ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢ (‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÅ‡∏•‡πâ‡∏ß)")

def check_files():
    """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô"""
    required = [
        'main.py',
        'config.json',
        'mt5_auto_connector.py',
        'smart_profit_manager.py',
        'survivability_engine.py',
        'ai_money_manager.py', 
        'gold_hedge_calculator.py',
        'api_connector.py'
    ]
    
    missing = []
    for file in required:
        if not os.path.exists(file):
            missing.append(file)
        else:
            print(f"‚úÖ {file}")
    
    if missing:
        print(f"\n‚ùå ‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏î‡∏´‡∏≤‡∏¢: {missing}")
        return False
    
    print("\n‚úÖ ‡πÑ‡∏ü‡∏•‡πå‡∏Ñ‡∏£‡∏ö‡∏ó‡∏∏‡∏Å‡∏ï‡∏±‡∏ß")
    return True

def install_requirements():
    """‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á requirements ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"""
    requirements = ['pyinstaller', 'numpy', 'MetaTrader5', 'requests']
    
    for req in requirements:
        try:
            __import__(req)
            print(f"‚úÖ {req} ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")
        except ImportError:
            print(f"üì¶ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á {req}...")
            try:
                subprocess.check_call([sys.executable, "-m", "pip", "install", req])
                print(f"‚úÖ ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á {req} ‡πÄ‡∏™‡∏£‡πá‡∏à")
            except:
                print(f"‚ùå ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á {req} ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
                return False
    
    return True

def build_exe():
    """‡∏™‡∏£‡πâ‡∏≤‡∏á .exe ‡πÑ‡∏ü‡∏•‡πå"""
    print("\nüöÄ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á .exe ‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏î‡∏µ‡∏¢‡∏ß...")
    
    try:
        # ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏Å‡πà‡∏≤
        import shutil
        if os.path.exists('build'):
            shutil.rmtree('build')
            print("üóëÔ∏è ‡∏•‡∏ö‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå build ‡πÄ‡∏Å‡πà‡∏≤")
        if os.path.exists('dist'):
            shutil.rmtree('dist')
            print("üóëÔ∏è ‡∏•‡∏ö‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå dist ‡πÄ‡∏Å‡πà‡∏≤")
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏î‡πâ‡∏ß‡∏¢ spec file
        cmd = ['pyinstaller', '--clean', '--noconfirm', 'AI_Gold_Trading.spec']
        
        print(f"üìú ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á: {' '.join(cmd)}")
        print("‚è≥ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á... (‡∏≠‡∏≤‡∏à‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤ 1-2 ‡∏ô‡∏≤‡∏ó‡∏µ)")
        
        result = subprocess.run(cmd, capture_output=True, text=True)
        
        if result.returncode == 0:
            print("‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á .exe ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏ü‡∏•‡πå
            exe_path = "dist/AI_Gold_Trading.exe"
            if os.path.exists(exe_path):
                size_mb = os.path.getsize(exe_path) / (1024 * 1024)
                print(f"üìÅ ‡πÑ‡∏ü‡∏•‡πå: {exe_path}")
                print(f"üìä ‡∏Ç‡∏ô‡∏≤‡∏î‡πÑ‡∏ü‡∏•‡πå: {size_mb:.1f} MB")
                
                # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏±‡∏ô‡πÑ‡∏ü‡∏•‡πå
                print("\nüß™ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÑ‡∏ü‡∏•‡πå .exe...")
                test_result = test_exe(exe_path)
                if test_result:
                    print("‚úÖ ‡πÑ‡∏ü‡∏•‡πå .exe ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ!")
                else:
                    print("‚ö†Ô∏è ‡πÑ‡∏ü‡∏•‡πå .exe ‡∏≠‡∏≤‡∏à‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤ - ‡∏•‡∏≠‡∏á‡∏£‡∏±‡∏ô‡∏î‡πâ‡∏ß‡∏¢‡∏ï‡∏ô‡πÄ‡∏≠‡∏á")
                
                return True
            else:
                print("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå .exe")
                return False
        else:
            print("‚ùå ‡∏™‡∏£‡πâ‡∏≤‡∏á .exe ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
            print("\nüìù Error output:")
            print(result.stderr)
            print("\nüìù Standard output:")
            print(result.stdout)
            return False
            
    except Exception as e:
        print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")
        return False

def test_exe(exe_path):
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÑ‡∏ü‡∏•‡πå .exe"""
    try:
        # ‡∏£‡∏±‡∏ô‡πÑ‡∏ü‡∏•‡πå .exe ‡πÅ‡∏•‡πâ‡∏ß‡∏£‡∏≠ 3 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ ‡πÅ‡∏•‡πâ‡∏ß‡∏õ‡∏¥‡∏î
        process = subprocess.Popen([exe_path], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        
        try:
            # ‡∏£‡∏≠ 3 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
            stdout, stderr = process.communicate(timeout=3)
            return True
        except subprocess.TimeoutExpired:
            # ‡∏ñ‡πâ‡∏≤‡∏£‡∏±‡∏ô‡πÑ‡∏î‡πâ‡πÄ‡∏Å‡∏¥‡∏ô 3 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ ‡πÅ‡∏™‡∏î‡∏á‡∏ß‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ
            process.terminate()
            return True
            
    except Exception as e:
        print(f"‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÑ‡∏ü‡∏•‡πå .exe: {e}")
        return False

def copy_final_files():
    """‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏à‡∏Å‡∏à‡πà‡∏≤‡∏¢"""
    try:
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤
        customer_folder = "AI_Gold_Trading_Customer"
        if os.path.exists(customer_folder):
            import shutil
            shutil.rmtree(customer_folder)
        os.makedirs(customer_folder)
        
        # ‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå .exe
        import shutil
        shutil.copy2("dist/AI_Gold_Trading.exe", customer_folder)
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå README
        readme_content = """üèÜ AI Gold Grid Trading System

üìã ‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô:
1. ‡πÄ‡∏õ‡∏¥‡∏î MetaTrader5 ‡πÅ‡∏•‡∏∞ login account
2. ‡πÄ‡∏õ‡∏¥‡∏î‡πÑ‡∏ü‡∏•‡πå AI_Gold_Trading.exe
3. ‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° "Connect MT5"
4. ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Trading Mode
5. ‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° "Calculate AI Parameters"
6. ‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° "Start AI Trading"

‚ö†Ô∏è ‡∏Ç‡πâ‡∏≠‡∏Å‡∏≥‡∏´‡∏ô‡∏î:
- Windows 10/11
- MetaTrader5 ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏•‡πâ‡∏ß
- Internet connection

üìû ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏±‡∏ö‡∏™‡∏ô‡∏∏‡∏ô
"""
        
        with open(f"{customer_folder}/README.txt", 'w', encoding='utf-8') as f:
            f.write(readme_content)
        
        print(f"üì¶ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏û‡πá‡∏Ñ‡πÄ‡∏Å‡∏à‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤: {customer_folder}/")
        return customer_folder
        
    except Exception as e:
        print(f"‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏û‡πá‡∏Ñ‡πÄ‡∏Å‡∏à‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤: {e}")
        return None

def main():
    print("üèóÔ∏è AI Gold Trading - ‡∏™‡∏£‡πâ‡∏≤‡∏á EXE ‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏î‡∏µ‡∏¢‡∏ß (‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÅ‡∏•‡πâ‡∏ß)")
    print("=" * 60)
    
    # ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á requirements
    print("üì¶ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á requirements...")
    if not install_requirements():
        input("‚ùå ‡∏Å‡∏î Enter ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏≠‡∏≠‡∏Å...")
        return
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏ü‡∏•‡πå
    print("\nüìã ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏ü‡∏•‡πå...")
    if not check_files():
        input("‚ùå ‡∏Å‡∏î Enter ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏≠‡∏≠‡∏Å...")
        return
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á spec file
    print("\nüìù ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á spec file...")
    create_spec_file()
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á exe
    success = build_exe()
    
    if success:
        print("\nüéâ ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ‡πÑ‡∏ü‡∏•‡πå‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏û‡πá‡∏Ñ‡πÄ‡∏Å‡∏à‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤
        customer_folder = copy_final_files()
        
        print("\nüìã ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå:")
        print("üìÅ ‡πÑ‡∏ü‡∏•‡πå‡∏´‡∏•‡∏±‡∏Å: dist/AI_Gold_Trading.exe")
        if customer_folder:
            print(f"üì¶ ‡πÅ‡∏û‡πá‡∏Ñ‡πÄ‡∏Å‡∏à‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤: {customer_folder}/")
        print("üîí ‡πÇ‡∏Ñ‡πâ‡∏î‡∏ñ‡∏π‡∏Å‡∏ã‡πà‡∏≠‡∏ô‡πÅ‡∏•‡πâ‡∏ß")
        print("üí° ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á‡πÑ‡∏ü‡∏•‡πå AI_Gold_Trading.exe ‡πÉ‡∏´‡πâ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢")
        
        # ‡πÄ‡∏õ‡∏¥‡∏î‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå
        try:
            if customer_folder and os.path.exists(customer_folder):
                os.startfile(customer_folder)
            else:
                os.startfile("dist")
        except:
            pass
            
    else:
        print("\n‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
        print("üí° ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ó‡∏µ‡πà‡∏û‡∏ö‡∏ö‡πà‡∏≠‡∏¢:")
        print("- Antivirus block PyInstaller")
        print("- ‡πÑ‡∏°‡πà‡∏°‡∏µ permission ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÑ‡∏ü‡∏•‡πå")
        print("- RAM ‡πÑ‡∏°‡πà‡∏û‡∏≠")
        print("- ‡πÑ‡∏ü‡∏•‡πå main.py ‡∏°‡∏µ syntax error")
    
    input("\n‡∏Å‡∏î Enter ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏≠‡∏≠‡∏Å...")

if __name__ == "__main__":
    main()